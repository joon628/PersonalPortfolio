name: Build & Deploy Portfolio

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME:        ${{ vars.APP_NAME }}
  SERVICE_NAME:    ${{ vars.SERVICE_NAME }}
  PROD_COMPOSE:    ${{ vars.PROD_COMPOSE_PATH || '/srv/prod/docker-compose.yml' }}
  HEALTHCHECK_URL: ${{ vars.HEALTHCHECK_URL }}
  REGISTRY_USER:   ${{ secrets.REGISTRY_USER }}  # Store as secret
  REGISTRY_PASS:   ${{ secrets.REGISTRY_PASS }}  # Store as secret

concurrency:
  group: deploy-${{ github.ref_name }}-${{ vars.SERVICE_NAME }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: self-hosted          # Dev runner
    environment: production       # requires manual approval
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH tunnel to production registry
        run: |
          # Kill any existing tunnel
          pkill -f "ssh.*-L 5000:localhost:5000" || true
          
          # Create SSH tunnel to production registry
          ssh -f -N -L 5000:localhost:5000 joon628@prod
          
          # Wait for tunnel to be established
          sleep 2

      - name: Login to production registry
        run: |
          echo "${{ env.REGISTRY_PASS }}" | docker login localhost:5000 -u "${{ env.REGISTRY_USER }}" --password-stdin

      - name: Build and push image
        env:
          IMAGE: localhost:5000/portfolio
          SHA:   ${{ github.sha }}
        run: |
          # Build the image
          docker build -t $IMAGE:$SHA -t $IMAGE:main .
          
          # Push to production registry through tunnel
          docker push $IMAGE:$SHA
          docker push $IMAGE:main

      - name: Deploy on production
        run: |
          # Update the service to use the new image
          ssh joon628@prod "cd /srv/prod && docker compose pull ${{ env.SERVICE_NAME }}"
          ssh joon628@prod "cd /srv/prod && docker compose up -d ${{ env.SERVICE_NAME }}"
          ssh joon628@prod "cd /srv/prod && docker compose ps ${{ env.SERVICE_NAME }}"

      - name: Clean up SSH tunnel
        if: always()
        run: |
          pkill -f "ssh.*-L 5000:localhost:5000" || true

      - name: Health check
        if: ${{ env.HEALTHCHECK_URL != '' }}
        run: |
          URL="${{ env.HEALTHCHECK_URL }}"
          echo "Checking $URL"
          for i in {1..15}; do
            code=$(curl -fsS -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ] || [ "$code" = "204" ]; then
              echo "Healthy ($code)"
              exit 0
            fi
            echo "Attempt $i: got $code, retrying..."
            sleep 4
          done
          echo "Health check failed"
          exit 1